// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  prompts   Prompt[]
  ratings   Rating[]
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  prompts     Prompt[]
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  prompts   PromptTag[]
}

model Prompt {
  id              String   @id @default(cuid())
  title           String
  content         String
  description     String?
  targetModel     String   // e.g., "GPT-4", "Gemini", "Claude 3"
  temperature     Float?   // Parameter: 0.0-2.0
  maxTokens       Int?     // Parameter: max tokens
  topP            Float?   // Parameter: 0.0-1.0
  frequencyPenalty Float?  // Parameter: 0.0-2.0
  presencePenalty Float?   // Parameter: 0.0-2.0
  notes           String?
  isFavorite      Boolean  @default(false)
  viewCount       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  authorId        String
  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id])
  
  tags            PromptTag[]
  ratings         Rating[]
  versions        PromptVersion[]
  
  @@map("prompts")
}

model PromptTag {
  id       String @id @default(cuid())
  promptId String
  tagId    String
  
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  tag      Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([promptId, tagId])
  @@map("prompt_tags")
}

model Rating {
  id        String   @id @default(cuid())
  value     Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  promptId  String
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  
  @@unique([userId, promptId])
  @@map("ratings")
}

model PromptVersion {
  id          String   @id @default(cuid())
  title       String
  content     String
  description String?
  targetModel String
  temperature Float?
  maxTokens   Int?
  topP        Float?
  frequencyPenalty Float?
  presencePenalty Float?
  notes       String?
  versionNote String?  // Note about what changed in this version
  createdAt   DateTime @default(now())
  
  originalPromptId String
  originalPrompt   Prompt @relation(fields: [originalPromptId], references: [id], onDelete: Cascade)
  
  @@map("prompt_versions")
}